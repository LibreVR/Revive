<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{BC34622B-5BFC-42D0-858A-331BECC048AE}</ProjectGuid>
    <RootNamespace>Revive</RootNamespace>
    <WindowsTargetPlatformVersion>10.0.15063.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v140</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v140</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v140</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v140</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <TargetName>LibRevive32_1</TargetName>
    <OutDir>$(SolutionDir)$(Configuration)\$(SolutionName)\$(PlatformShortName)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <TargetName>LibRevive32_1</TargetName>
    <OutDir>$(SolutionDir)$(Configuration)\$(SolutionName)\$(PlatformShortName)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <TargetName>LibRevive64_1</TargetName>
    <OutDir>$(SolutionDir)$(Configuration)\$(SolutionName)\$(PlatformShortName)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <TargetName>LibRevive64_1</TargetName>
    <OutDir>$(SolutionDir)$(Configuration)\$(SolutionName)\$(PlatformShortName)\</OutDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>DEBUG;VK_NO_PROTOTYPES;MICROPROFILE_ENABLED=1;MICROPROFILE_GPU_TIMERS=0;OVR_DLL_BUILD;GLEW_STATIC;_CRT_SECURE_NO_WARNINGS;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>..\microprofile;..\minhook\include;..\openvr\headers;..\LibOVR\Include;..\glew\include;..\Vulkan\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
    </ClCompile>
    <Link>
      <AdditionalLibraryDirectories>..\openvr\lib\win32;..\glew\lib\Release\Win32</AdditionalLibraryDirectories>
      <AdditionalDependencies>Ws2_32.lib;openvr_api.lib;glew32s.lib;opengl32.lib;dxgi.lib;dxguid.lib;dsound.lib;Winmm.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>
      <IgnoreSpecificDefaultLibraries>libcmt.lib</IgnoreSpecificDefaultLibraries>
      <ModuleDefinitionFile>dxgi.def</ModuleDefinitionFile>
    </Link>
    <FxCompile>
      <HeaderFileOutput>%(Filename).hlsl.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <ShaderModel>4.0</ShaderModel>
      <VariableName>g_%(Filename)</VariableName>
    </FxCompile>
    <PostBuildEvent>
      <Command>copy /Y "$(SolutionDir)openvr\bin\win32"  "$(TargetDir)"</Command>
    </PostBuildEvent>
    <ResourceCompile>
      <AdditionalIncludeDirectories>..\LibOVR\Include</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>DEBUG;VK_NO_PROTOTYPES;MICROPROFILE_ENABLED=1;MICROPROFILE_GPU_TIMERS=0;OVR_DLL_BUILD;GLEW_STATIC;_CRT_SECURE_NO_WARNINGS;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>..\microprofile;..\minhook\include;..\openvr\headers;..\LibOVR\Include;..\glew\include;..\Vulkan\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
    </ClCompile>
    <Link>
      <AdditionalLibraryDirectories>..\openvr\lib\win64;..\glew\lib\Release\x64</AdditionalLibraryDirectories>
      <AdditionalDependencies>Ws2_32.lib;openvr_api.lib;glew32s.lib;opengl32.lib;dxgi.lib;dxguid.lib;dsound.lib;Winmm.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>
      <IgnoreSpecificDefaultLibraries>libcmt.lib</IgnoreSpecificDefaultLibraries>
      <ModuleDefinitionFile>dxgi.def</ModuleDefinitionFile>
    </Link>
    <FxCompile>
      <HeaderFileOutput>%(Filename).hlsl.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <ShaderModel>4.0</ShaderModel>
      <VariableName>g_%(Filename)</VariableName>
    </FxCompile>
    <PostBuildEvent>
      <Command>copy /Y "$(SolutionDir)openvr\bin\win64"  "$(TargetDir)"</Command>
    </PostBuildEvent>
    <ResourceCompile>
      <AdditionalIncludeDirectories>..\LibOVR\Include</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>VK_NO_PROTOTYPES;MICROPROFILE_ENABLED=0;MICROPROFILE_GPU_TIMERS=0;OVR_DLL_BUILD;GLEW_STATIC;_CRT_SECURE_NO_WARNINGS;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>..\microprofile;..\minhook\include;..\openvr\headers;..\LibOVR\Include;..\glew\include;..\Vulkan\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <AdditionalLibraryDirectories>..\openvr\lib\win32;..\glew\lib\Release\Win32</AdditionalLibraryDirectories>
      <AdditionalDependencies>Ws2_32.lib;openvr_api.lib;glew32s.lib;opengl32.lib;dxgi.lib;dxguid.lib;dsound.lib;Winmm.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>
      <ModuleDefinitionFile>dxgi.def</ModuleDefinitionFile>
    </Link>
    <FxCompile>
      <HeaderFileOutput>%(Filename).hlsl.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <ShaderModel>4.0</ShaderModel>
      <VariableName>g_%(Filename)</VariableName>
    </FxCompile>
    <PostBuildEvent>
      <Command>copy /Y "$(SolutionDir)openvr\bin\win32"  "$(TargetDir)"</Command>
    </PostBuildEvent>
    <ResourceCompile>
      <AdditionalIncludeDirectories>..\LibOVR\Include</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>VK_NO_PROTOTYPES;MICROPROFILE_ENABLED=0;MICROPROFILE_GPU_TIMERS=0;OVR_DLL_BUILD;GLEW_STATIC;_CRT_SECURE_NO_WARNINGS;_MBCS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>..\microprofile;..\minhook\include;..\openvr\headers;..\LibOVR\Include;..\glew\include;..\Vulkan\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <AdditionalLibraryDirectories>..\openvr\lib\win64;..\glew\lib\Release\x64</AdditionalLibraryDirectories>
      <AdditionalDependencies>Ws2_32.lib;openvr_api.lib;glew32s.lib;opengl32.lib;dxgi.lib;dxguid.lib;dsound.lib;Winmm.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>
      <ModuleDefinitionFile>dxgi.def</ModuleDefinitionFile>
    </Link>
    <FxCompile>
      <HeaderFileOutput>%(Filename).hlsl.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <ShaderModel>4.0</ShaderModel>
      <VariableName>g_%(Filename)</VariableName>
    </FxCompile>
    <PostBuildEvent>
      <Command>copy /Y "$(SolutionDir)openvr\bin\win64"  "$(TargetDir)"</Command>
    </PostBuildEvent>
    <ResourceCompile>
      <AdditionalIncludeDirectories>..\LibOVR\Include</AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI_Vk.h" />
    <ClInclude Include="..\microprofile\microprofile.h" />
    <ClInclude Include="..\microprofile\microprofiledraw.h" />
    <ClInclude Include="..\microprofile\microprofilehtml.h" />
    <ClInclude Include="..\microprofile\microprofileui.h" />
    <ClInclude Include="..\openvr\headers\openvr.h" />
    <ClInclude Include="CompositorBase.h" />
    <ClInclude Include="CompositorD3D.h" />
    <ClInclude Include="CompositorGL.h" />
    <ClInclude Include="CompositorVk.h" />
    <ClInclude Include="HapticsBuffer.h" />
    <ClInclude Include="OVR_CAPI.h" />
    <ClInclude Include="REV_Math.h" />
    <ClInclude Include="SessionDetails.h" />
    <ClInclude Include="InputManager.h" />
    <ClInclude Include="Session.h" />
    <ClInclude Include="..\LibOVR\Include\Extras\OVR_Math.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI_Audio.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI_D3D.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI_GL.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_CAPI_Keys.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_ErrorCode.h" />
    <ClInclude Include="..\LibOVR\Include\OVR_Version.h" />
    <ClInclude Include="Assert.h" />
    <ClInclude Include="Settings.h" />
    <ClInclude Include="SettingsManager.h" />
    <ClInclude Include="TextureBase.h" />
    <ClInclude Include="TextureD3D.h" />
    <ClInclude Include="TextureGL.h" />
    <ClInclude Include="TextureVk.h" />
    <ClInclude Include="vulkan.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="CompositorBase.cpp" />
    <ClCompile Include="CompositorD3D.cpp" />
    <ClCompile Include="CompositorGL.cpp" />
    <ClCompile Include="CompositorVk.cpp" />
    <ClCompile Include="dxgi.cpp" />
    <ClCompile Include="HapticsBuffer.cpp" />
    <ClCompile Include="REV_CAPI_Vk.cpp" />
    <ClCompile Include="SessionDetails.cpp" />
    <ClCompile Include="InputManager.cpp" />
    <ClCompile Include="main.cpp" />
    <ClCompile Include="microprofile.cpp" />
    <ClCompile Include="REV_CAPI.cpp" />
    <ClCompile Include="REV_CAPI_Audio.cpp" />
    <ClCompile Include="REV_CAPI_D3D.cpp" />
    <ClCompile Include="REV_CAPI_GL.cpp" />
    <ClCompile Include="Session.cpp" />
    <ClCompile Include="SettingsManager.cpp" />
    <ClCompile Include="TextureBase.cpp" />
    <ClCompile Include="TextureD3D.cpp" />
    <ClCompile Include="TextureGL.cpp" />
    <ClCompile Include="TextureVk.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\minhook\build\VC15\libMinHook.vcxproj">
      <Project>{f142a341-5ee0-442d-a15f-98ae9b48dbae}</Project>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <FxCompile Include="CompositorShader.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
    </FxCompile>
    <FxCompile Include="MirrorShader.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Pixel</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
    </FxCompile>
    <FxCompile Include="VertexShader.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Vertex</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Vertex</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Vertex</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
    </FxCompile>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="Revive.rc" />
  </ItemGroup>
  <ItemGroup>
    <None Include="dxgi.def" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>