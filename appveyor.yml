image: Visual Studio 2017
clone_folder: c:\projects\revive

environment:
  QTDIR: C:\Qt\5.13.2\msvc2017_64

install:
  # update vcpkg to the latest version
  - cd C:\Tools\vcpkg
  - git pull
  - .\bootstrap-vcpkg.bat
  - cd %APPVEYOR_BUILD_FOLDER%
  - git submodule update --init --recursive
  - mkdir c:\projects\download_cache
  # download and extract Oculus SDK
  - ps: |
      Invoke-WebRequest -Uri 'https://securecdn.oculus.com/binaries/download/?id=4377593722298679' -OutFile 'c:\projects\download_cache\oculus_sdk.zip'
      cd c:\projects\revive\Externals
      unzip c:\projects\download_cache\oculus_sdk.zip
  # install required NSIS plugins
  - ps: |
      Invoke-WebRequest -Uri 'https://nsis.sourceforge.io/mediawiki/images/4/4a/AccessControl.zip' -OutFile 'c:\projects\download_cache\NSIS_AccessControl.zip'
      cd c:\projects\download_cache
      unzip NSIS_AccessControl.zip
      copy Plugins\i386-ansi\AccessControl.dll 'C:\Program Files (x86)\NSIS\Plugins\x86-ansi'
      copy Plugins\i386-unicode\AccessControl.dll 'C:\Program Files (x86)\NSIS\Plugins\x86-unicode'
      
build_script:
  # ensure vcpkg dependencies are installed
  - ps: |
      vcpkg integrate install
      vcpkg install --triplet x86-windows-static detours openxr-loader glfw3
      vcpkg install --triplet x64-windows-static detours openxr-loader glfw3
  # build the solution
  - ps: |
      cd C:\Projects\Revive
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
        msbuild Revive.sln /t:Build /p:Configuration=Release /p:Platform=x64
        msbuild Revive.sln /t:Build /p:Configuration=Release /p:Platform=x86
      } Else {
        msbuild Revive.sln /t:Build /p:Configuration=Nightly /p:Platform=x64
        msbuild Revive.sln /t:Build /p:Configuration=Nightly /p:Platform=x86
      }
      
after_build:
  # copy additional files to the build folder
  - ps: |
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
        cd C:\Projects\Revive\Release
      } Else {
        cd C:\Projects\Revive\Nightly
      }
      copy ..\Externals\WinSparkle\x64\Release\WinSparkle.dll .
      copy ..\ReviveOverlay\SupportAssets . -Filter "*.jpg" -Recurse -Container
      copy C:\openssl-v111-win64\bin\libcrypto-1_1-x64.dll .
      copy C:\openssl-v111-win64\bin\libssl-1_1-x64.dll .
  # gather build artifacts
  - ps: |
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
        cd C:\Projects\Revive\Release
      } Else {
        cd C:\Projects\Revive\Nightly
      }
      7z a ..\Installer\Revive.zip ReviveInjector.exe LibRevive32.dll LibRevive64.dll LibReviveXR64.dll LibReviveXR32.dll
  # run NSIS to generate installer
  - ps: |
      cd C:\Projects\Revive\Installer
      $env:Path += ";C:\Program Files (x86)\NSIS"
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
        makensis Revive.nsi
      } Else {
        makensis /DNIGHTLY Revive.nsi
      }

artifacts:
  - path: Installer\ReviveInstaller.exe
    name: Revive Installer
  - path: Installer\Revive.zip
    name: Revive Build

deploy:
  provider: GitHub
  auth_token:
    secure: RJL9lEOsUrSTf/CQu7woP0CR2zGXjurIw5MgrcCG7XuhBizOblpukL76zjNkxcqC
  artifact: 'Revive Installer'
  draft: true
  prerelease: false
  on:
    APPVEYOR_REPO_TAG: true
